package small_cpu_pkg
{
	enum MainWidth
	{
		W16,
		W32,
		W64,
		Bad,
	}
	func __as__
	(
		mw: input MainWidth
	): size_t
	{
		switch mw
		{
		//--------
		MainWidth::W16 { return 16; }
		MainWidth::W32 { return 32; }
		MainWidth::W64 { return 64; }

		// Error code
		default { return 0; }
		//--------
		}
	}
	func __as__
	(
		mw: input size_t
	): MainWidth
	{
		switch mw
		{
		//--------
		16 { return MainWidth::W16; }
		32 { return MainWidth::W32; }
		64 { return MainWidth::W64; }
		default { return MainWidth::Bad; }
		//--------
		}
	}

	enum BusAccType
	{
		None,
		Read,
		Write,
	}

	class Bus
	<
		MAIN_WIDTH: MainWidth
	>
	{
		static alias MainData: type = logic<MAIN_WIDTH as size_t>;

		class In
		{
			//--------
			clk, rst_n: logic;
			//--------

			//--------
			read_data: MainData;
			acc_ready: logic;
			//--------

			//--------
			// Request an interrupt
			irq: logic;
			//--------
		}
		in: In;

		class Out
		{
			//--------
			acc_type: BusAccType;
			addr, write_data: MainData;
			//--------

			//--------
			// Grant an interrupt
			igt: logic;
			//--------

			//--------
			task stop_bus_acc()
			{
				self.acc_type := BusAccType::None;
			}

			task prep_bus_read
			(
				addr: input MainData
			)
			{
				self.acc_type := BusAccType::Read;
				self.addr := addr;
			}

			task prep_bus_write
			(
				addr, write_data: input MainData
			)
			{
				self.acc_type := BusAccType::Write;
				self.addr := addr;
				self.write_data := write_data;
			}
			//--------
		}
		out: Out;
	}

	package instr_pkg
	{
		//--------
		NON_SIMM_FIELD_WIDTH: const size_t = 4;
		alias NonSimmField: type = logic<NON_SIMM_FIELD_WIDTH>;
		//--------

		//--------
		enum Opcode: NonSimmField
		{
			Add,
			Sub,
			Sltu,
			Addi,

			AddiPc,
			Bzo,
			Bnz,
			Jmp,

			And,
			Or,
			Xor,
			Ldr,

			Str,

			// Enable interrupts
			Eint,

			// Disable interrupts
			Dint,

			// Enable interrupts and jump to the `ira` general-purpose
			// register
			Reti,
		}

		enum GprInd: NonSimmField
		{
			Ira,
			Ida,
			U0,
			U1,

			U2,
			U3,
			U4,
			U5,

			U6,
			U7,
			U8,
			U9,

			U10,
			Lr,
			Fp,
			Sp,
		}
		//--------

		//--------
		base class packed EncOrDecInstrBase
		<
			MAIN_WIDTH: MainWidth
		>
		{
			//--------
			alias MainData: type = logic<MAIN_WIDTH as size_t>;
			//--------

			//--------
			op: Opcode;
			gpr_a_ind, gpr_b_ind: GprInd;
			//--------
		}
		//--------

		//--------
		class packed EncInstr
		<
			MAIN_WIDTH: MainWidth
		>
			extends EncOrDecInstrBase<MAIN_WIDTH>
		{
			//--------
			static SIMM_FIELD_WIDTH: const size_t 
				= (MAIN_WIDTH as size_t)
				- EncOrDecInstrBase<MAIN_WIDTH>$size;

			simm: logic<SIMM_FIELD_WIDTH>;

			const func ext_simm(): dyn MainData
			{
				return cat(sized(MainData$size - self.simm$size,
					self.simm$lastel), self.simm);
			}
			//--------
		}
		class packed DecInstr
		<
			MAIN_WIDTH: MainWidth
		>
			extends EncOrDecInstrBase<MAIN_WIDTH>
		{
			//--------
			signext_imm: MainData;
			//--------

			//--------
			task init
			(
				enc_instr: input EncInstr<MAIN_WIDTH>
			)
			{
				cat(self.op, self.gpr_a_ind, self.gpr_b_ind)
					:= cat(enc_instr.op, enc_instr.gpr_a_ind,
						enc_instr.gpr_b_ind);
				self.signext_imm := enc_instr.ext_simm();
			}
			//--------
		}
		//--------
	}
}
