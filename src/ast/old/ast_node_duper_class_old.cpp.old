// This file is part of Fling HDL.
//
// Copyright 2020 Andrew Clark (FL4SHK)
//
// Fling HDL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Fling HDL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Fling HDL.  If not, see <https://www.gnu.org/licenses/>.

#include "ast_node_duper_class.hpp"

namespace fling_hdl
{

namespace ast
{


//--------
BaseUptr AstNodeDuper::_construct(Base* s_parent, const BaseUptr& to_dup)
	const
{
	#define X(type) \
		if (to_dup->id() == #type) \
		{ \
			return BaseUptr(new type(s_parent, to_dup->fp())); \
		}
	LIST_OF_AST_NODE_CLASSES(X)
	#undef X

	return BaseUptr(nullptr);
}
//--------


//--------
/*
#define _INNER_BUILD_DATA(item) \
	temp->item = to_dup->item

#define BUILD_DATA(type, ...) \
	void AstNodeDuper::_dup_data(ast::type* to_dup) \
	{ \
		IF (HAS_ARGS(__VA_ARGS__)) \
		( \
			ast::type* temp = static_cast<ast::type*>(_visit_node.get()); \
			EVAL(MAP(_INNER_BUILD_DATA, SEMICOLON, __VA_ARGS__)); \
		) \
	}

//#include "ast_build_data_macro_calls.hpp"
#undef _INNER_BUILD_DATA
#undef BUILD_DATA
*/
//--------

//--------
/*
#define _INNER_BUILD_CHILDREN(item) \
	_inner_dup_children(temp->item, to_dup->item)

#define BUILD_CHILDREN(type, ...) \
	void AstNodeDuper::_dup_children(ast::type* to_dup) \
	{ \
		IF (HAS_ARGS(__VA_ARGS__)) \
		( \
			ast::type* temp = static_cast<ast::type*>(_visit_node.get()); \
			EVAL(MAP(_INNER_BUILD_CHILDREN, SEMICOLON, __VA_ARGS__)); \
		) \
	}

//#include "ast_build_children_macro_calls.hpp"
#undef _INNER_BUILD_CHILDREN
#undef BUILD_CHILDREN
*/
//--------

//--------
//inline void AstNodeDuper::_inner_dup_children(BaseUptr& ret_item,
//	const BaseUptr& to_dup_item)
//{
//	DeferredRestorer deferred_restorer(this);
//
//	_visit_node = _construct(_visit_node.get(), to_dup_item);
//	to_dup_item->accept(this);
//	ret_item = move(_visit_node);
//}
//inline void AstNodeDuper::_inner_dup_children(BaseUptrList& ret_item,
//	const BaseUptrList& to_dup_item)
//{
//	DeferredRestorer deferred_restorer(this);
//
//	for (const auto& item: to_dup_item)
//	{
//		_visit_node = _construct(_visit_node.get(), item.data);
//		item.data->accept(this);
//		ret_item.push_back(move(_visit_node));
//	}
//}
//--------

//--------
#define GEN_VISIT_FUNC(type) \
	void AstNodeDuper::visit##name(type* to_dup) \
	{ \
		type* temp = static_cast<type*>(_visit_node.get()); \
		_visit_node->copy_data(to_dup);
	}
LIST_OF_AST_NODE_CLASSES(GEN_VISIT_FUNC)
#undef GEN_VISIT_FUNC
//--------

} // namespace ast

} // namespace fling_hdl
